{"version":3,"sources":["serviceWorker.ts","shared/utils/action-type.util.ts","component/games/rps/reducer/rps-reducer.ts","config/axios-interceptor.ts","component/authentication/reducer/authentication-reducer.ts","shared/reducer/actions-reducer.ts","shared/widgets/toast/CustomWidgetToast.ts","shared/utils/permission.ts","shared/reducer/index.ts","shared/reducer/store.ts","shared/utils/uniqueKey.ts","shared/widgets/common/common.tsx","component/games/rps/models/type/move-type-classname.ts","shared/widgets/textbox/CustomWidgetInput.ts","shared/widgets/textbox/CustomWidgetInputElement.tsx","shared/widgets/button/CustomWidgetButton.ts","shared/widgets/button/CustomWidgetButtonElement.tsx","component/authentication/login/login-page.tsx","component/games/rps/models/type/playerType.ts","component/games/rps/models/type/move-type.ts","component/games/rps/modules/player-component.tsx","component/games/rps/service/convert-service.ts","component/games/rps/service/restart-service.ts","component/games/rps/main-rps-component.tsx","shared/widgets/dropDownBox/CustomWidgetDropDown.ts","shared/widgets/dropDownBox/CustomWidgetDropDownElement.tsx","component/games/rps/initial-rps-component.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","REQUEST","actionType","SUCCESS","FAILURE","ACTION_TYPES","initialState","loading","rpsGameReducer","axios","defaults","timeout","baseURL","process","SERVER_API_URL","setupAxiosInterceptors","token","interceptors","request","use","config","headers","Authorization","response","err","status","alert","href","Promise","reject","isAuthenticated","loginError","showModalLogin","account","toastAction","toast","permissionID","this","Toast","div","document","createElement","getElementsByTagName","appendChild","position","X","Y","createWidget","cssClass","elementPermissionID","userPermissions","hide","isRtl","enableRtl","setWidgetDirection","show","toastObj","message","content","height","width","destroy","element","onclick","undefined","HTMLElement","appendTo","label","rootReducer","combineReducers","state","action","type","payload","data","authenticationState","id_token","mainOperations","defaultMiddlewares","thunkMiddleware","promiseMiddleware","composedMiddlewares","middlewares","compose","applyMiddleware","initialize","createStore","reducer","UniqueID","prefix","lastId","Guid","newID","LabelPosition","replace","Math","random","toString","MoveTypeClassname","CustomWidgetCommon","props","widgetPanelID","widgetID","fontSize","widget","widgetProp","getWidget","React","Component","CustomWidgetInput","placeHolder","textbox","TextBox","setPlaceHolder","setFloatLabelType","stat","enabled","attributes","forEach","a","addAttributes","refresh","value","length","maxNumber","onkeypress","e","console","log","floatLabelType","placeholder","CustomWidgetInputElement","prop","widgetInput","initialProps","id","style","display","padding","CustomWidgetButton","button","translateLabel","Button","setLabel","disable","disabled","isEnabled","setDisability","styleName","isHidden","CustomWidgetButtonElement","LoginPage","iButtonSubmit","iTextBoxUseName","iTextBoxPassword","warningElementID","handleLogin","username","getValue","password","login","rememberMe","setStyleSheet","setType","onClick","prevProps","prevState","snapshot","from","pathname","search","showToast","to","className","Col","md","direction","mapDispatchToProps","entity","dispatch","async","post","get","connect","PlayerType","MoveType","PlayerComponent","playerNameLabelRef","imageRef","playerResultLabelRef","createRef","initializeOperations","operations","operation","setPlayerName","current","innerText","QUESTION_MARK","setPlayerClassIcon","setPlayerResult","result","textAlign","Row","ref","castMoveTypeToImageClass","moveType","PAPER","ROCK","SCISSORS","restIfNotAthenticated","history","push","MainRpsComponent","firstPlayer","secondPlayer","iButtonPlayGame","iButtonBackToMain","iButtonRockChoice","iButtonPaperChoice","iButtonScissorsChoice","firstMoveType","secondMoveType","isHumanOnLeft","setPlayerValues","initializeButtons","playerAction","playerName","isFirst","isHuman","HUMAN","name","initializeRPSButtons","playBtn","backBtn","checkAndSetMoveType","player","playerType","shapeType","calculatedRpsGameResult","isInvalidToSelect","COMPUTER","fillRPSButtons","rpsBtn","rpsGame","resultType","verticalAlign","margin","CustomWidgetDropDown","combobox","DropDownList","dataSource","fields","change","itemTemplate","items","itemIndex","addItem","index","getItems","showPopup","CustomWidgetDropDownElement","combo","InitialRpsComponent","iComboFirstPlayer","iComboSecondPlayer","initializeDropDowns","initializeStartGameBtn","setDropDownProps","dropDownWidget","setDataSource","text","submitButton","firstValue","secondValue","checkValidity","color","paddingLeft","globalStore","clearAuthentication","messageKey","bindActionCreators","ReactDOM","render","store","createBrowserHistory","path","component","InitialRpsPlayersComponent","exact","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8a9bf896.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\n/**\n * Appends REQUEST async action type\n */\n\nexport const REQUEST = (actionType: any) => `${actionType}_PENDING`;\n\n/**\n * Appends SUCCESS async action type\n */\n\nexport const SUCCESS = (actionType: any) => `${actionType}_FULFILLED`;\n\n/**\n * Appends FAILURE async action type\n */\n\nexport const FAILURE = (actionType: any) => `${actionType}_REJECTED`;\n","import axios from 'axios';\nimport {IPayloadResult} from \"../../../../shared/type/dataTypes-utils\";\nimport {FAILURE, REQUEST, SUCCESS} from \"../../../../shared/utils/action-type.util\";\nimport {GameModel} from \"../models/game-model\";\n\n\nexport const ACTION_TYPES = {\n    CALCULATE_RPS_RESULT: ':baseInfo/FETCH_MANAGE_GROUPS_TREEVIEW'\n};\n\nconst initialState = {\n    loading: false,\n    rpsGameReducer: {} as GameModel\n};\n\nexport type RPSGameReducerType = Readonly<typeof initialState>;\n\n// Reducer\nexport default (state: RPSGameReducerType = initialState, action: any): RPSGameReducerType => {\n    switch (action.type) {\n        case REQUEST(ACTION_TYPES.CALCULATE_RPS_RESULT):\n            return {\n                ...state,\n                loading: true\n            };\n        case FAILURE(ACTION_TYPES.CALCULATE_RPS_RESULT):\n            return {\n                ...state,\n                loading: false,\n            };\n        case SUCCESS(ACTION_TYPES.CALCULATE_RPS_RESULT):\n            return {\n                ...state,\n                loading: false,\n                rpsGameReducer: action.payload.data\n                // cardGroup: action.payload.data,\n            };\n        default:\n            return state;\n    }\n};\n\n// Actions\nexport const calculatedRpsGameResult: IPayloadResult<any> = entity => ({\n    type: ACTION_TYPES.CALCULATE_RPS_RESULT,\n    payload: axios.post('/api/games/rps-game', entity)\n});\n","import axios from 'axios';\n\nconst TIMEOUT = 60 * 60 * 1000;\naxios.defaults.timeout = TIMEOUT;\naxios.defaults.baseURL = process.env.SERVER_API_URL;\n\nconst setupAxiosInterceptors = (token: string) => {\n    const onRequestSuccess = (config: any) => {\n        if (token) {\n            config.headers.Authorization = `Bearer ${token}`;\n        }\n        return config;\n    };\n    const onResponseSuccess = (response: any) => response;\n    const onResponseError = (err: any) => {\n        const status = err.status || (err.response ? err.response.status : 0);\n        if (status === 403 || status === 401) {\n            alert('JWT Token is expired!')\n            window.location.href = \"/\";\n        }\n        return Promise.reject(err);\n    };\n    axios.interceptors.request.use(onRequestSuccess);\n    axios.interceptors.response.use(onResponseSuccess, onResponseError);\n};\n\nexport default setupAxiosInterceptors;\n","import axios from 'axios';\nimport {FAILURE, REQUEST, SUCCESS} from \"../../../shared/utils/action-type.util\";\nimport setupAxiosInterceptors from \"../../../config/axios-interceptor\";\n\nexport const ACTION_TYPES = {\n    ACCOUNT: 'authentication/ACCOUNT',\n    AUTHENTICATE: 'authentication/AUTHENTICATE',\n    LOGOUT: 'authentication/LOGOUT',\n    CLEAR_AUTH: 'authentication/CLEAR_AUTH'\n\n};\n\n\nconst initialState = {\n    loading: false,\n    isAuthenticated: false,\n    loginError: false, // Errors returned from server side\n    showModalLogin: false,\n    account: {},\n};\n\nexport type AuthenticationState = Readonly<typeof initialState>;\n\n// Reducer\n\nexport default (state: AuthenticationState = initialState, action: any): AuthenticationState => {\n    switch (action.type) {\n        case REQUEST(ACTION_TYPES.ACCOUNT):\n        case REQUEST(ACTION_TYPES.LOGOUT):\n            return {\n                ...state,\n                loading: true\n            };\n        case FAILURE(ACTION_TYPES.ACCOUNT):\n        case FAILURE(ACTION_TYPES.LOGOUT):\n            return {\n                ...initialState,\n                account: undefined\n            };\n        case SUCCESS(ACTION_TYPES.AUTHENTICATE): {\n            setupAxiosInterceptors( action.payload.data.id_token);\n            return {\n                ...state,\n                loading: false,\n                isAuthenticated: true\n            };\n        }\n        case SUCCESS(ACTION_TYPES.ACCOUNT): {\n            return {\n                ...state,\n                loading: false,\n                account: action.payload.data,\n            };\n        }\n        case ACTION_TYPES.CLEAR_AUTH:\n            return {\n                ...state,\n                loading: false,\n                showModalLogin: true,\n                isAuthenticated: false\n            };\n        default:\n            return state;\n    }\n};\n\n/*\n* after authenticating, by existing JWT token\n* it gets user details from database for setting a custom UI for each User.\n* */\nexport const getUserAccount = () => async (dispatch: any) => await dispatch({\n    type: ACTION_TYPES.ACCOUNT,\n    payload: axios.get('/api/account')\n});\n\n/*\n* Authenticating Users!\n* */\nexport const login = (entity: any) => async (dispatch: any) => {\n    await dispatch({\n        type: ACTION_TYPES.AUTHENTICATE,\n        payload: axios.post('/authenticate', entity)\n    });\n    await dispatch(getUserAccount());\n};\n","import {CustomWidgetToast} from \"../widgets/toast/CustomWidgetToast\";\n\nconst initialState = {\n    toastAction: new CustomWidgetToast()\n};\n\nexport type MainOperations = Readonly<typeof initialState>;\n\nexport default (state: MainOperations = initialState): MainOperations => state","import {Toast, ToastModel} from '@syncfusion/ej2-notifications';\n\nimport {CheckUserPermissionOnControl} from \"../../../shared/utils/permission\";\nimport {IWidgetCommon} from \"../common/common\";\n\nexport class CustomWidgetToast implements IWidgetCommon<Toast> {\n    private toast: Toast;\n    permissionID = true;\n\n    applyPermission(elementPermissionID: string, userPermissions: string[]): void {\n        const isAuthenticated: boolean = CheckUserPermissionOnControl(elementPermissionID, userPermissions);\n        this.permissionID = isAuthenticated;\n    }\n\n    constructor() {\n        this.toast = new Toast();\n        const div = document.createElement('div');\n        document.getElementsByTagName('body')[0].appendChild(div);\n        this.toast.position = {X: 'Left', Y: 'Bottom'};\n        this.createWidget(div);\n        this.toast.cssClass = 'CustomWidget-toast-style';\n    }\n\n    hide() {\n        this.toast.hide();\n    }\n\n    setWidgetDirection(isRtl: any): void {\n        this.toast.position = isRtl ? {X: 'Left', Y: 'Bottom'} : {X: 'Right', Y: 'Bottom'};\n        this.toast.enableRtl = isRtl;\n    }\n\n    showWithRtl(isRtl: boolean) {\n        this.setWidgetDirection(isRtl);\n        this.toast.show();\n    }\n\n    show(toastObj?: ToastModel) {\n        this.toast.show(toastObj);\n    }\n\n    showToast(message: string) {\n        this.show({content: message})\n    }\n\n    setHeight(height: number) {\n    }\n\n    setWidth(width: number) {\n    }\n\n    destroy(): void {\n        this.toast.destroy();\n    }\n\n    getWidget() {\n        return this.toast;\n    }\n\n    getElement() {\n        return this.toast.element;\n    }\n\n    OnClick(onclick: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null) {\n        this.toast.element.onclick = onclick;\n    }\n\n    createWidget(element: any): void {\n        if (element !== undefined) {\n            if (element instanceof HTMLElement) {\n                this.toast.appendTo(element);\n            } else {\n                this.toast.appendTo('#' + element);\n            }\n        }\n    }\n\n    getLabel(): any {\n        return this.toast.content;\n    }\n\n    setLabel(label: string) {\n        this.toast.content = label;\n    }\n\n}\n","export const CheckUserPermissionOnControl = (elementPermissionID: any, userPermissions: any[]) => {\n    //TODO not implemented\n    return true;\n}","import {combineReducers} from 'redux';\nimport rpsGameReducer, {RPSGameReducerType} from \"../../component/games/rps/reducer/rps-reducer\";\nimport authenticationState, {AuthenticationState} from \"../../component/authentication/reducer/authentication-reducer\";\nimport mainOperations,{MainOperations} from \"./actions-reducer\";\n\n\nexport interface IRootState {\n    readonly rpsGameReducer: RPSGameReducerType;\n    readonly authenticationState: AuthenticationState;\n    readonly mainOperations: MainOperations\n}\n\nconst rootReducer = combineReducers<IRootState>({\n    rpsGameReducer,\n    authenticationState,\n    mainOperations\n});\n\nexport default rootReducer;\n","import {createStore, applyMiddleware, compose} from 'redux';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport thunkMiddleware from 'redux-thunk';\nimport reducer, {IRootState} from \"./index\";\n\nconst defaultMiddlewares = [\n    thunkMiddleware,\n    promiseMiddleware\n];\nconst composedMiddlewares = (middlewares:any) => compose(applyMiddleware(...defaultMiddlewares, ...middlewares));\n\nconst initialize = (initialState?: IRootState, middlewares = [] as any[]) => createStore(reducer, initialState, composedMiddlewares(middlewares));\n\nexport default initialize;\n","export default function UniqueID(prefix = 'CustomWidget-') {\n  const lastId = Guid.newID();\n  return `${prefix}${lastId}`;\n}\n\nexport class Guid {\n  static newID() {\n    return 'xxxxxxxx'.replace(/[x]/g, function () {\n      const random = Math.random() * 16 | 0;\n      return random.toString(16);\n    });\n  }\n}\n","import React from 'react';\nimport UniqueID from \"../../../shared/utils/uniqueKey\";\n\nexport interface IWidgetCommon<T> extends IWidgetLabel {\n    setHeight(height: number | string):void;\n\n    setWidth(width: number | string):void;\n\n    destroy(): void;\n\n    getWidget(): T;\n\n    createWidget(element: any): void;\n\n    setWidgetDirection(isRtl: boolean): void;\n\n    applyPermission(elementPermissionID: string, userPermissions: string[]): void;\n}\n\ninterface IWidgetLabel {\n    getLabel(): string;\n\n    setLabel(label: string):void;\n}\n\nexport enum LabelPosition {\n    Left,\n    Right,\n    Top,\n    None\n}\n\nexport interface IWidgetOps<T> {\n   getWidget?(): T;\n}\n\nexport interface IWidgetProps {\n    widgetProp: IWidgetOps<any>;\n    width?: string;\n}\n\nexport class CustomWidgetCommon<T> extends React.Component<IWidgetProps> {\n    widgetPanelID: string;\n    widgetID: string;\n    fontSize='';\n    height='';\n    width='';\n    widget!: T;\n\n    constructor(props:any) {\n        super(props);\n        this.widgetPanelID = UniqueID();\n        this.widgetID = UniqueID();\n    }\n\n    initialProps(widgetProp: IWidgetOps<any>) {\n    widgetProp.getWidget = () => this.widget as any;\n  }\n}","export enum MoveTypeClassname {\n    ROCK = 'rps-rock-class',\n    PAPER = 'rps-paper-class',\n    SCISSORS = 'rps-scissors-class',\n    QUESTION_MARK = 'rps-question-class'\n}","import {FloatLabelType, TextBox} from '@syncfusion/ej2-inputs';\nimport {IWidgetCommon} from \"../common/common\";\n\nimport {CheckUserPermissionOnControl} from \"../../../shared/utils/permission\";\n\nexport class CustomWidgetInput implements IWidgetCommon<TextBox> {\n  private textbox: TextBox;\n  permissionID=true;\n\n  applyPermission(elementPermissionID: string, userPermissions: string[]): void {\n    const isAuthenticated: boolean = CheckUserPermissionOnControl(elementPermissionID, userPermissions);\n    if (!isAuthenticated) {\n      // this.setDisability(false);\n    }\n    this.permissionID = isAuthenticated;\n  }\n\n  constructor(element?: string | HTMLElement, placeHolder?: string, isRtl?: boolean) {\n    this.textbox = new TextBox();\n    this.setPlaceHolder(placeHolder);\n    this.setFloatLabelType('Auto');\n    this.setWidgetDirection(isRtl);\n    this.createWidget(element);\n  }\n\n  setWidgetDirection(isRtl: any): void {\n    this.textbox.enableRtl = isRtl;\n  }\n\n  setEnable(stat: boolean) {\n    this.textbox.enabled = stat;\n  }\n\n  setType(type: string) {\n    this.textbox.type = type;\n  }\n\n  addAttributes(attributes: Array<{ [key: string]: string }>) {\n    attributes.forEach(a => this.textbox.addAttributes(a));\n  }\n\n  render() {\n    this.textbox.refresh();\n  }\n\n  setHeight(height: number) {\n  }\n\n  setWidth(width: number) {\n\n  }\n\n  setValue(value: string) {\n    this.textbox.value = value;\n  }\n\n  getValue() {\n    return (this.textbox.value !== null && this.textbox.value.length > 0) ? this.textbox.value : '';\n  }\n\n  destroy(): void {\n    this.textbox.destroy();\n  }\n\n  getWidget() {\n    return this.textbox;\n  }\n\n  getElement() {\n    return this.textbox.element;\n  }\n\n  setMaxLength(maxNumber: number) {\n    this.textbox.element.onkeypress = (e) => {\n      console.log(this.textbox.value);\n      if (this.textbox.value.length <= maxNumber) {\n        return false;\n      }\n    };\n  }\n\n  createWidget(element: any): void {\n    if (element !== undefined) {\n      if (element instanceof HTMLElement) {\n        this.textbox.appendTo(element);\n      } else {\n        this.textbox.appendTo('#' + element);\n      }\n    }\n  }\n\n  setFloatLabelType(floatLabelType: FloatLabelType): void {\n    this.textbox.floatLabelType = floatLabelType;\n  }\n\n  getPlaceHolder(): string {\n    return this.textbox.placeholder;\n  }\n\n  setPlaceHolder(label: string) {\n    this.textbox.placeholder = label;\n  }\n\n  getLabel(): string {\n    return this.textbox.placeholder;\n  }\n\n  setLabel(label: string) {\n    this.textbox.placeholder = label;\n  }\n}\n","import React from 'react';\nimport {CustomWidgetCommon} from \"../common/common\";\nimport {CustomWidgetInput} from \"./CustomWidgetInput\";\n\nexport class CustomWidgetInputElement extends CustomWidgetCommon<CustomWidgetInput> {\n    widgetInput: CustomWidgetInput;\n\n    constructor(prop: any) {\n        super(prop);\n        this.widgetInput = new CustomWidgetInput();\n        this.widget = this.widgetInput;\n        this.initialProps(this.props.widgetProp);\n    }\n\n    componentDidMount(): void {\n        this.widget.createWidget(this.widgetID);\n    }\n\n    render(): React.ReactElement<any, string | React.JSXElementConstructor<any>> | string | number | {} | React.ReactNodeArray | React.ReactPortal | boolean | null | undefined {\n        return (<div id={this.widgetPanelID}\n                     style={{width: this.props.width, height: this.height, display: 'flex', fontSize: this.fontSize}}>\n            <div style={{padding: '0 7px 0'}}>\n                <input style={{height: this.height}} id={this.widgetID}/>\n            </div>\n        </div>);\n    }\n\n    destroy(): void {\n        this.widget.destroy();\n    }\n}\n","import {Button} from '@syncfusion/ej2-buttons';\n\nimport {CheckUserPermissionOnControl} from \"../../../shared/utils/permission\";\nimport {IWidgetCommon} from \"../common/common\";\n\nexport class CustomWidgetButton implements IWidgetCommon<Button> {\n    private button: Button;\n    private translateLabel = '';\n    private placeholder = '';\n    isAuthenticated = true;\n\n    applyPermission(elementPermissionID: string, userPermissions: string[]): void {\n        const isAuthenticated: boolean = CheckUserPermissionOnControl(elementPermissionID, userPermissions);\n        if (!isAuthenticated) {\n            this.setDisability(false);\n        }\n        this.isAuthenticated = isAuthenticated;\n    }\n\n    constructor(element?: string | HTMLElement, label?: string, isRtl?: boolean) {\n        this.isAuthenticated = true;\n        this.button = new Button();\n        this.createWidget(element);\n        this.setWidgetDirection(isRtl);\n        this.setLabel(label);\n        this.button.cssClass = 'e-control e-btn e-lib e-outline e-primary';\n    }\n\n    setDisability(disable: boolean) {\n        this.button.disabled = !this.isAuthenticated || disable;\n    }\n\n    setWidgetDirection(isRtl: any): void {\n        this.button.enableRtl = isRtl;\n    }\n\n    setEnable(isEnabled: boolean) {\n        this.setDisability(!isEnabled);\n    }\n\n    setHeight(height: number) {\n    }\n\n    setWidth(width: number) {\n    }\n\n    setStyleSheet(styleName: string) {\n        this.button.cssClass += ' '+ styleName;\n    }\n\n    destroy(): void {\n        this.button.destroy();\n    }\n\n    getWidget() {\n        return this.button;\n    }\n\n    getElement() {\n        return this.button.element;\n    }\n\n    OnClick(onclick: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null) {\n        this.button.element.onclick = onclick;\n    }\n\n    createWidget(element: any): void {\n        if (element !== undefined) {\n            if (element instanceof HTMLElement) {\n                this.button.appendTo(element);\n            } else {\n                this.button.appendTo('#' + element);\n            }\n        }\n    }\n\n    onClick(onclick: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null): void {\n        if (this.isAuthenticated) {\n            this.button.element.onclick = onclick;\n        }\n    }\n\n    setLabel(label?: string) {\n        if (label !== undefined) {\n            this.button.content = label;\n        }\n    }\n\n    setHidden(isHidden: boolean) {\n        // TODO should be implemented after demo\n    }\n\n\n    getLabel() {\n        return this.button.content;\n    }\n\n    setTranslateLink(translateLabel: string) {\n        this.translateLabel = translateLabel;\n    }\n\n    getTranslateLink() {\n        return this.translateLabel;\n    }\n\n    getPlaceHolder() {\n        return this.placeholder;\n    }\n\n    setPlaceHolder(placeholder: string) {\n        this.placeholder = placeholder;\n    }\n}\n","import React from 'react';\nimport {CustomWidgetCommon} from \"../common/common\";\nimport {CustomWidgetButton} from \"./CustomWidgetButton\";\nimport UniqueID from \"../../utils/uniqueKey\";\n\n\nexport class CustomWidgetButtonElement extends CustomWidgetCommon<CustomWidgetButton> {\n\n    constructor(prop: any) {\n        super(prop);\n        this.widget = new CustomWidgetButton();\n        this.widgetID = UniqueID();\n        this.initialProps(this.props.widgetProp);\n    }\n\n\n    componentDidMount(): void {\n        this.widget.createWidget(this.widgetID);\n    }\n\n    render(): React.ReactElement<any, string | React.JSXElementConstructor<any>> | string | number | {} | React.ReactNodeArray | React.ReactPortal | boolean | null | undefined {\n        return (\n            <div style={{width: this.props.width, height: this.height}} id={this.widgetPanelID}>\n                <button style={{height: this.height, fontSize: this.fontSize}} id={this.widgetID}/>\n            </div>);\n    }\n\n    destroy(): void {\n        this.widget.destroy();\n    }\n}\n","import React from 'react';\nimport {connect} from 'react-redux';\nimport './login-page.css';\nimport {IRootState} from \"../../../shared/reducer\";\nimport {Redirect, RouteComponentProps} from \"react-router\";\nimport {login} from \"../reducer/authentication-reducer\";\nimport {Col} from \"react-bootstrap\";\nimport {IWidgetOps} from \"../../../shared/widgets/common/common\";\nimport {CustomWidgetButton} from \"../../../shared/widgets/button/CustomWidgetButton\";\nimport {CustomWidgetInput} from \"../../../shared/widgets/textbox/CustomWidgetInput\";\nimport {CustomWidgetInputElement} from \"../../../shared/widgets/textbox/CustomWidgetInputElement\";\nimport {CustomWidgetButtonElement} from \"../../../shared/widgets/button/CustomWidgetButtonElement\";\nimport UniqueID from \"../../../shared/utils/uniqueKey\";\n\ninterface IProps extends StateProps, DispatchProps, RouteComponentProps<{}> {\n\n}\n\nclass LoginPage extends React.Component<IProps> {\n    private iButtonSubmit: IWidgetOps<CustomWidgetButton> = {};\n    private iTextBoxUseName: IWidgetOps<CustomWidgetInput> = {};\n    private iTextBoxPassword: IWidgetOps<CustomWidgetInput> = {};\n    warningElementID: string;\n\n    constructor(props: any) {\n        super(props);\n        this.warningElementID = UniqueID();\n    }\n\n\n    componentDidMount(): void {\n        let widget = this.iButtonSubmit.getWidget();\n        widget.setLabel('login');\n        widget.setStyleSheet('standard-button-width');\n        this.iTextBoxPassword.getWidget().setType('password');\n        widget.onClick(this.handleLogin);\n    }\n\n    componentDidUpdate(prevProps: Readonly<StateProps>, prevState: Readonly<DispatchProps>, snapshot?: any): void {\n\n    }\n\n    handleLogin = () => {\n        const username = this.iTextBoxUseName.getWidget().getValue();\n        const password = this.iTextBoxPassword.getWidget().getValue();\n        this.props.login({username: username, password: password, rememberMe: false});\n    };\n\n    render() {\n        const {location} = this.props;\n        const {from} = location.state || {from: {pathname: '/initialize-rps-config', search: location.search}};\n        if (this.props.authenticationState.isAuthenticated) {\n            this.props.mainOperations.toastAction.showToast('You are welcome to our game center!');\n            return <Redirect to={from}/>;\n        }\n        return (\n            <div className=\"login-page-form\" style={{height: '180px', width: '323px'}}>\n                <div className=\"row login-form-input-row\">\n                    <Col md={\"12\"}>\n                        <div className=\"login-form-input\" style={{display: 'flex'}}>\n                            <label className=\"login-label-style\">UserName :</label>\n                            <CustomWidgetInputElement width={'300px'}\n                                                      widgetProp={this.iTextBoxUseName}/>\n                        </div>\n                        <div className=\"login-form-input\" style={{display: 'flex'}}>\n                            <label className=\"login-label-style\">Password :</label>\n                            <CustomWidgetInputElement width={'300px'}\n                                                      widgetProp={this.iTextBoxPassword}/>\n                        </div>\n                    </Col>\n                    <div id={this.warningElementID}/>\n                    <div className=\"col-md-12\" style={{direction: \"rtl\"}}>\n                        <CustomWidgetButtonElement width={'120px'} widgetProp={this.iButtonSubmit}/>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = ({authenticationState,mainOperations}: IRootState) => ({\n    authenticationState,\n    mainOperations\n});\n\nconst mapDispatchToProps = {login};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(LoginPage);\n","export enum PlayerType {\n    COMPUTER = 'COMPUTER',\n    HUMAN = 'HUMAN'\n}","export enum MoveType {\n    ROCK ,\n    PAPER ,\n    SCISSORS ,\n    TIE\n}","import {PlayerService} from \"../service/player-service\";\nimport React, {createRef, RefObject} from \"react\";\nimport {Row} from \"react-bootstrap\";\nimport {MoveTypeClassname} from \"../models/type/move-type-classname\";\n\nexport interface IPlayerState {\n    operation?: PlayerService;\n}\n\nexport default class PlayerComponent extends React.Component<IPlayerState> {\n    readonly playerNameLabelRef: RefObject<HTMLLabelElement>;\n    readonly imageRef: RefObject<HTMLDivElement>;\n    readonly playerResultLabelRef: RefObject<HTMLLabelElement>;\n\n    constructor(props: any) {\n        super(props);\n        this.playerNameLabelRef = createRef();\n        this.playerResultLabelRef = createRef();\n        this.imageRef = createRef();\n    }\n\n    componentDidMount(): void {\n        this.initializeOperations();\n\n    }\n\n    private initializeOperations() {\n        const operations = this.props.operation;\n        operations.setPlayerName = (label) => {\n            this.playerNameLabelRef.current.innerText = label;\n            this.imageRef.current.className = MoveTypeClassname.QUESTION_MARK;\n        };\n\n        operations.setPlayerClassIcon = (className) => {\n            this.imageRef.current.className = className;\n        };\n\n        operations.setPlayerResult = (result: number) => {\n            this.playerResultLabelRef.current.innerText = 'Result : ' + result ;\n        }\n    }\n\n    render(): React.ReactElement<any, string | React.JSXElementConstructor<any>> | string | number | {} | React.ReactNodeArray | React.ReactPortal | boolean | null | undefined {\n        return (<div style={{textAlign: 'center'}}>\n            <Row>\n                <label ref={this.playerResultLabelRef} style={{width: '100%'}}></label>\n            </Row>\n            <div className=\"rps-panel-move-image-class\" >\n                <div>\n                    <label ref={this.playerNameLabelRef}/>\n                </div>\n                <div style={{padding: '10px'}}>\n                    <div ref={this.imageRef} className=\"rps-move-image-class\"/>\n                </div>\n            </div>\n        </div>);\n    }\n}","import {MoveTypeClassname} from \"../models/type/move-type-classname\";\n\nexport const castMoveTypeToImageClass = (moveType: string) => {\n    console.log(moveType);\n    switch (moveType) {\n        case 'PAPER':\n            return MoveTypeClassname.PAPER;\n        case 'ROCK':\n            return MoveTypeClassname.ROCK;\n        case 'SCISSORS':\n            return MoveTypeClassname.SCISSORS;\n        default:\n            return MoveTypeClassname.QUESTION_MARK;\n    }\n};\n\n","export const restIfNotAthenticated = (props: any) => {\n    if (!props.authenticationState.isAuthenticated) {\n        props.history.push('/');\n    }\n};","import React from 'react';\nimport {connect} from \"react-redux\";\nimport {RouteComponentProps} from \"react-router\";\nimport {Col, Row} from 'react-bootstrap';\nimport {IRootState} from \"../../../shared/reducer\";\nimport PlayerComponent from \"./modules/player-component\";\nimport {PlayerService} from \"./service/player-service\";\nimport {MoveTypeClassname} from \"./models/type/move-type-classname\";\n\nimport './contents/styles/rps-game-page.css';\nimport {calculatedRpsGameResult} from \"./reducer/rps-reducer\";\nimport {PlayerType} from \"./models/type/playerType\";\nimport {GameModel} from \"./models/game-model\";\nimport {MoveType} from \"./models/type/move-type\";\nimport {PlayerModel} from \"./models/player-model\";\nimport {castMoveTypeToImageClass} from \"./service/convert-service\";\nimport {restIfNotAthenticated} from \"./service/restart-service\";\nimport {IWidgetOps} from \"../../../shared/widgets/common/common\";\nimport {CustomWidgetButton} from \"../../../shared/widgets/button/CustomWidgetButton\";\nimport {CustomWidgetButtonElement} from \"../../../shared/widgets/button/CustomWidgetButtonElement\";\n\ninterface IProps extends StateProps, DispatchProps, RouteComponentProps<{}> {\n}\n\nclass MainRpsComponent extends React.Component<IProps> {\n    private firstPlayer: PlayerService = {};\n    private secondPlayer: PlayerService = {};\n\n    private iButtonPlayGame: IWidgetOps<CustomWidgetButton> = {};\n    private iButtonBackToMain: IWidgetOps<CustomWidgetButton> = {};\n\n    private iButtonRockChoice: IWidgetOps<CustomWidgetButton> = {};\n    private iButtonPaperChoice: IWidgetOps<CustomWidgetButton> = {};\n    private iButtonScissorsChoice: IWidgetOps<CustomWidgetButton> = {};\n    firstMoveType: MoveType;\n    secondMoveType: MoveType;\n\n    private isHumanOnLeft: boolean;\n\n    constructor(props: any) {\n        super(props);\n        restIfNotAthenticated(props);\n    }\n\n\n    componentDidMount(): void {\n        this.setPlayerValues();\n        this.initializeButtons();\n    }\n\n    private setPlayerValues() {\n        const state = this.props.location.state;\n        const setPlayerName = (playerAction: PlayerService, playerName: string, isFirst: boolean) => {\n            const isHuman = playerName === PlayerType.HUMAN;\n            playerName = isHuman ? this.props.authenticationState.account as string : playerName;\n            const setInnerPlayerName = (name: string) => {\n                if (isFirst)\n                    this.isHumanOnLeft = isHuman;\n\n                playerAction.setPlayerName(name);\n                playerAction.setPlayerResult(0);\n            };\n            setInnerPlayerName(playerName);\n        };\n        setPlayerName(this.firstPlayer, state.firstPlayer, true);\n        setPlayerName(this.secondPlayer, state.secondPlayer, false);\n    }\n\n    private initializeButtons() {\n        const state = this.props.location.state;\n        this.initializeRPSButtons(state);\n        const playBtn = this.iButtonPlayGame.getWidget();\n        const backBtn = this.iButtonBackToMain.getWidget();\n        backBtn.setLabel('Back');\n        backBtn.onClick(() => this.props.history.push('/initialize-rps-config'));\n        playBtn.setLabel('Start');\n        playBtn.onClick(() => {\n            const isInvalidToSelect =\n                (state.firstPlayer === PlayerType.HUMAN &&\n                    this.firstMoveType === undefined) ||\n                (state.secondPlayer === PlayerType.HUMAN &&\n                    this.secondMoveType === undefined);\n\n            if (!isInvalidToSelect) {\n                const firstPlayer: PlayerModel = {};\n                const secondPlayer: PlayerModel = {};\n                const checkAndSetMoveType = (player: PlayerModel, moveType: MoveType, playerType: PlayerType) => {\n                    player.playerType = playerType;\n                    if (moveType !== undefined) {\n                        player.shapeType = moveType;\n                    }\n                };\n                checkAndSetMoveType(secondPlayer, this.secondMoveType, state.secondPlayer);\n                checkAndSetMoveType(firstPlayer, this.firstMoveType, state.firstPlayer);\n                const data: GameModel = {\n                    firstPlayer: firstPlayer,\n                    secondPlayer: secondPlayer\n                };\n                this.props.calculatedRpsGameResult(data);\n            } else {\n                this.props.mainOperations.toastAction.showToast(\"please select a move!\");\n            }\n            this.iButtonPlayGame.getWidget().setDisability(true);\n        });\n    }\n\n    initializeRPSButtons(state: any) {\n        const isInvalidToSelect = (state.firstPlayer === PlayerType.COMPUTER &&\n            state.secondPlayer === PlayerType.COMPUTER);\n        const fillRPSButtons = (rpsBtn: CustomWidgetButton, moveType: MoveType, className: MoveTypeClassname) => {\n            rpsBtn.setLabel('<div style=\"width:30px;height:30px;\" class=\"' + className + '\"/>');\n            rpsBtn.setDisability(isInvalidToSelect);\n            rpsBtn.onClick(() => {\n                if (this.isHumanOnLeft) {\n                    this.firstMoveType = moveType;\n                    this.firstPlayer.setPlayerClassIcon(className);\n                } else {\n                    this.secondMoveType = moveType;\n                    this.secondPlayer.setPlayerClassIcon(className);\n                }\n                console.log(this.firstMoveType, this.secondMoveType);\n            });\n        };\n\n        fillRPSButtons(this.iButtonScissorsChoice.getWidget(), MoveType.SCISSORS, MoveTypeClassname.SCISSORS);\n        fillRPSButtons(this.iButtonRockChoice.getWidget(), MoveType.ROCK, MoveTypeClassname.ROCK);\n        fillRPSButtons(this.iButtonPaperChoice.getWidget(), MoveType.PAPER, MoveTypeClassname.PAPER);\n    }\n\n\n    componentDidUpdate(prevProps: Readonly<IProps>, prevState: Readonly<{}>, snapshot?: any): void {\n        const rpsGame = this.props.rpsGameReducer.rpsGameReducer;\n        if (rpsGame !== prevProps.rpsGameReducer.rpsGameReducer) {\n            this.firstPlayer.setPlayerResult(rpsGame.firstPlayer.resultType);\n            this.secondPlayer.setPlayerResult(rpsGame.secondPlayer.resultType);\n            this.firstPlayer.setPlayerClassIcon(castMoveTypeToImageClass(rpsGame.firstPlayer.shapeType.toString()));\n            this.secondPlayer.setPlayerClassIcon(castMoveTypeToImageClass(rpsGame.secondPlayer.shapeType.toString()));\n            this.iButtonPlayGame.getWidget().setDisability(false);\n            this.props.mainOperations.toastAction.showToast('<div>Player 1 ' + rpsGame.firstPlayer.resultType\n                + '</div><div>Player 2 ' + rpsGame.secondPlayer.resultType + '</div>');\n        }\n    }\n\n    render(): React.ReactElement<any, string | React.JSXElementConstructor<any>> | string | number | {} | React.ReactNodeArray | React.ReactPortal | boolean | null | undefined {\n        return (<div className=\"login-page-form\" style={{height: '350px', width: '450px'}}>\n            <Row>\n                <Col md={5}>\n                    <label className=\"rps-game-player-label\">\n                        Player 1:\n                    </label>\n                    <PlayerComponent operation={this.firstPlayer}/>\n                </Col>\n                <Col md={2}>\n                    <div style={{display: 'table', width: '100%', height: '100%'}}>\n                        <div style={{display: 'table-cell', verticalAlign: 'middle', textAlign: 'center'}}>VS</div>\n                    </div>\n                </Col>\n                <Col md={5}>\n                    <label className=\"rps-game-player-label\">\n                        Player 2:\n                    </label>\n                    <PlayerComponent operation={this.secondPlayer}/>\n                </Col>\n            </Row>\n            <hr/>\n            <div className=\"rps-choice-button-class\">\n                <div className='row'>\n                    <Col md={4}><CustomWidgetButtonElement width={'40px'} widgetProp={this.iButtonRockChoice}/> </Col>\n                    <Col md={4}><CustomWidgetButtonElement width={'40px'} widgetProp={this.iButtonPaperChoice}/> </Col>\n                    <Col md={4}><CustomWidgetButtonElement width={'40px'} widgetProp={this.iButtonScissorsChoice}/>\n                    </Col>\n                </div>\n            </div>\n            <div style={{width: '150px', margin: '0 auto'}}>\n                <Row>\n                    <Col md={6}><CustomWidgetButtonElement widgetProp={this.iButtonPlayGame}/></Col>\n                    <Col md={6}><CustomWidgetButtonElement widgetProp={this.iButtonBackToMain}/></Col>\n                </Row>\n            </div>\n        </div>);\n    }\n}\n\nconst mapStateToProps = ({mainOperations, rpsGameReducer, authenticationState}: IRootState) => ({\n    authenticationState,\n    rpsGameReducer,\n    mainOperations\n});\n\nconst mapDispatchToProps = {\n    calculatedRpsGameResult\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(MainRpsComponent);","import {IWidgetCommon} from \"../common/common\";\nimport {DropDownList, ChangeEventArgs, FieldSettingsModel} from '@syncfusion/ej2-dropdowns';\nimport {EmitType} from '@syncfusion/ej2-base';\n\nimport {CheckUserPermissionOnControl} from \"../../../shared/utils/permission\";\nimport {FloatLabelType} from \"@syncfusion/ej2-inputs\";\n\nexport class CustomWidgetDropDown implements IWidgetCommon<DropDownList> {\n    private combobox: DropDownList;\n    permissionID = true;\n\n    applyPermission(elementPermissionID: string, userPermissions: string[]): void {\n        const isAuthenticated: boolean = CheckUserPermissionOnControl(elementPermissionID, userPermissions);\n        if (!isAuthenticated) {\n            // this.setDisability(false);\n        }\n        this.permissionID = isAuthenticated;\n    }\n\n    constructor(element?: string | HTMLElement) {\n        this.combobox = new DropDownList();\n        this.createWidget(element);\n    }\n\n    setDataSource(dataSource: any) {\n        this.combobox.dataSource = dataSource;\n    }\n\n    setEnable(stat: boolean) {\n        this.combobox.enabled = stat;\n    }\n\n    getPlaceHolder() {\n        return this.combobox.placeholder;\n    }\n\n    setPlaceHolder(placeholder: string) {\n        this.combobox.placeholder = placeholder;\n    }\n\n    setFields(fields: FieldSettingsModel) {\n        this.combobox.fields = fields;\n    }\n\n    onChange(change: EmitType<ChangeEventArgs>) {\n        this.combobox.change = change;\n    }\n\n    getValue() {\n        return this.combobox.value === null ? '' : this.combobox.value;\n    }\n\n    getText(): string {\n        return (this.combobox.element as any).value;\n    }\n\n    setValue(value: any) {\n        this.combobox.value = value;\n    }\n\n    setItemTemplate(itemTemplate: string) {\n        this.combobox.itemTemplate = itemTemplate;\n    }\n\n    addItems(items: [] |\n        { [key: string]: {}; } |\n        string | boolean | number |\n        string[] | boolean[] |\n        number[], itemIndex?: number) {\n        this.combobox.addItem(items);\n    }\n\n    setIndex(index: number) {\n        this.combobox.index = index;\n    }\n\n    setWidgetDirection(isRtl: any): void {\n        this.combobox.enableRtl = isRtl;\n    }\n\n    getItem() {\n        return this.combobox.getItems();\n    }\n\n    setHeight(height: number) {\n    }\n\n    setWidth(width: number) {\n\n    }\n\n    destroy(): void {\n        this.combobox.destroy();\n    }\n\n    getWidget() {\n        return this.combobox;\n    }\n\n    setFloatLabelType(floatLabelType: FloatLabelType) {\n        this.combobox.floatLabelType = floatLabelType;\n    }\n\n    getElement() {\n        return this.combobox.element;\n    }\n\n    createWidget(element: any): void {\n        if (element !== undefined) {\n            if (element instanceof HTMLElement) {\n                this.combobox.appendTo(element);\n            } else {\n                this.combobox.appendTo('#' + element);\n            }\n\n        }\n        try {\n            if (this.combobox.element !== undefined) {\n                this.combobox.element.onclick = () => {\n                    this.combobox.showPopup();\n                };\n            }\n        } catch (e) {\n            console.log('test Combo', e);\n        }\n    }\n\n    getLabel(): string {\n        return this.combobox.placeholder;\n    }\n\n    setLabel(label: string) {\n        this.combobox.placeholder = label;\n    }\n}\n","import React from 'react';\nimport UniqueID from \"../../../shared/utils/uniqueKey\";\nimport {CustomWidgetCommon} from \"../common/common\";\nimport {CustomWidgetDropDown} from \"./CustomWidgetDropDown\";\n\nexport class CustomWidgetDropDownElement extends CustomWidgetCommon<CustomWidgetDropDown> {\n  combo: CustomWidgetDropDown;\n\n  constructor(prop:any) {\n    super(prop);\n    this.combo = new CustomWidgetDropDown();\n    this.widget = this.combo;\n    this.widgetID = UniqueID();\n    this.widgetPanelID = UniqueID();\n    this.initialProps(this.props.widgetProp);\n  }\n\n  componentDidMount(): void {\n    this.widget.createWidget(this.widgetID);\n  }\n\n  render(): React.ReactElement<any, string | React.JSXElementConstructor<any>> | string | number | {} | React.ReactNodeArray | React.ReactPortal | boolean | null | undefined {\n    return (\n      <div id={this.widgetPanelID} style={{ width: this.props.width, height: this.height, display: 'flex', fontSize: this.fontSize }}>\n        <div style={{ padding: '0 7px 0' }}>\n          <input style={{ height: this.height, fontSize: this.fontSize, padding: '0' }} id={this.widgetID}/>\n        </div>\n      </div>);\n  }\n\n  destroy(): void {\n    this.widget.destroy();\n  }\n}\n","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport {RouteComponentProps} from \"react-router\";\nimport {IRootState} from \"../../../shared/reducer\";\nimport {PlayerType} from \"./models/type/playerType\";\nimport {restIfNotAthenticated} from \"./service/restart-service\";\nimport {IWidgetOps} from \"../../../shared/widgets/common/common\";\nimport {CustomWidgetButton} from \"../../../shared/widgets/button/CustomWidgetButton\";\nimport {CustomWidgetDropDown} from \"../../../shared/widgets/dropDownBox/CustomWidgetDropDown\";\nimport {CustomWidgetDropDownElement} from \"../../../shared/widgets/dropDownBox/CustomWidgetDropDownElement\";\nimport {CustomWidgetButtonElement} from \"../../../shared/widgets/button/CustomWidgetButtonElement\";\n\n\ninterface ICardInstituteProps extends StateProps, DispatchProps, RouteComponentProps<{}> {\n}\n\nclass InitialRpsComponent extends React.Component<ICardInstituteProps> {\n    private iButtonSubmit: IWidgetOps<CustomWidgetButton> = {};\n    private iComboFirstPlayer: IWidgetOps<CustomWidgetDropDown> = {};\n    private iComboSecondPlayer: IWidgetOps<CustomWidgetDropDown> = {};\n\n    constructor(props: any) {\n        super(props);\n        restIfNotAthenticated(props);\n    }\n\n    componentDidMount(): void {\n        this.initializeDropDowns();\n        this.initializeStartGameBtn();\n    }\n\n    private initializeDropDowns() {\n        const setDropDownProps = (dropDownWidget: CustomWidgetDropDown, label: string) => {\n            dropDownWidget.setFloatLabelType(\"Auto\");\n            dropDownWidget.setLabel(label);\n            dropDownWidget.setDataSource([{text: PlayerType.HUMAN, value: 0}, {text: PlayerType.COMPUTER, value: 1}]);\n        };\n\n        const firstComboWidget = this.iComboFirstPlayer.getWidget();\n        setDropDownProps(firstComboWidget, 'Left player');\n\n        const secondComboWidget = this.iComboSecondPlayer.getWidget();\n        setDropDownProps(secondComboWidget, 'Right player');\n    }\n\n    private initializeStartGameBtn() {\n        const submitButton = this.iButtonSubmit.getWidget();\n        submitButton.setLabel('Submit & Play');\n        submitButton.onClick(() => {\n            const firstValue = this.iComboFirstPlayer.getWidget().getValue().toString();\n            const secondValue = this.iComboSecondPlayer.getWidget().getValue().toString();\n            if (checkValidity(firstValue,secondValue)) {\n                this.props.mainOperations.toastAction.showToast('Please select the Correct Option!');\n            } else {\n                this.props.history.push('/main-rps-game', {firstPlayer: firstValue, secondPlayer: secondValue});\n            }\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"login-page-form\" style={{height: '245px', width: '297px'}}>\n                <label style={{width: '100%', textAlign: 'center', color: 'GrayText'}}>Computer vs Computer</label>\n                <label style={{width: '100%', textAlign: 'center', color: 'GrayText'}}>Computer vs Human</label>\n                <div className=\"row\" style={{paddingLeft: '50px'}}>\n                    <CustomWidgetDropDownElement widgetProp={this.iComboFirstPlayer}/>\n                    <CustomWidgetDropDownElement widgetProp={this.iComboSecondPlayer}/>\n                </div>\n                <div className=\"row\" style={{padding: '20px 0 0 57px'}}>\n                    <CustomWidgetButtonElement widgetProp={this.iButtonSubmit}>Home</CustomWidgetButtonElement>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = ({mainOperations, authenticationState}: IRootState) => ({\n    authenticationState,\n    mainOperations\n});\n\nconst mapDispatchToProps = {};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(InitialRpsComponent);\n\nconst checkValidity = (firstValue: string, secondValue: string) => {\n    return (secondValue === firstValue &&\n        firstValue === PlayerType.HUMAN) ||\n        firstValue.toString() === '' ||\n        secondValue.toString() === ''\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './contents/styles/index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '@syncfusion/ej2/bootstrap.css';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport initialize from \"./shared/reducer/store\";\nimport {Route, Router, Switch} from \"react-router\";\nimport {createBrowserHistory} from 'history'\nimport LoginPage from \"./component/authentication/login/login-page\";\nimport {bindActionCreators} from \"redux\";\nimport {ACTION_TYPES} from \"./component/authentication/reducer/authentication-reducer\";\nimport MainRpsComponent from \"./component/games/rps/main-rps-component\";\nimport InitialRpsPlayersComponent from \"./component/games/rps/initial-rps-component\";\n\n\nexport const globalStore = initialize();\n\nexport const clearAuthentication = (messageKey: string) => (dispatch: any) => {\n    dispatch(messageKey);\n    dispatch({\n        type: ACTION_TYPES.CLEAR_AUTH\n    });\n};\n\nbindActionCreators({clearAuthentication}, globalStore.dispatch);\n\nReactDOM.render(\n    <Provider store={globalStore}>\n        <div className=\"fullScreen-page-class\">\n            <div className=\"image-background-class\">\n                <div className=\"center-form-class\">\n                    <Router history={createBrowserHistory()}>\n                        <Switch>\n                            {/*<Route exact path=\"*\" component={LoginPage}/>*/}\n                            <Route path=\"/initialize-rps-config\" component={InitialRpsPlayersComponent}/>\n                            <Route path=\"/main-rps-game\" component={MainRpsComponent}/>\n                            <Route exact component={LoginPage} path=\"*\"/>\n                        </Switch>\n                    </Router>\n                </div>\n            </div>\n        </div>\n        <div className=\"page-footer-class\">This is Demo Project By Mehdi Najafian</div>\n    </Provider>\n    , document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}